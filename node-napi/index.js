/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const { platform, arch } = process;

let nativeBinding = null;
let loadError = null;

function isMusl() {
  // For Node 10
  if (!process.report || typeof process.report.getReport !== "function") {
    try {
      const lddPath = require("child_process")
        .execSync("which ldd")
        .toString()
        .trim();
      return readFileSync(lddPath, "utf8").includes("musl");
    } catch (e) {
      return true;
    }
  } else {
    const { glibcVersionRuntime } = process.report.getReport().header;
    return !glibcVersionRuntime;
  }
}

switch (platform) {
  case "android":
    switch (arch) {
      case "arm64":
        try {
          nativeBinding = require("./node-napi.android-arm64.node");
        } catch (e) {
          loadError = e;
        }
        break;
      case "arm":
        try {
          nativeBinding = require("./node-napi.android-arm-eabi.node");
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Android ${arch}`);
    }
    break;
  case "win32":
    switch (arch) {
      case "x64":
        try {
          nativeBinding = require("./node-napi.win32-x64-msvc.node");
        } catch (e) {
          loadError = e;
        }
        break;
      case "ia32":
        try {
          nativeBinding = require("./node-napi.win32-ia32-msvc.node");
        } catch (e) {
          loadError = e;
        }
        break;
      case "arm64":
        try {
          nativeBinding = require("./node-napi.win32-arm64-msvc.node");
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Windows: ${arch}`);
    }
    break;
  case "darwin":
    try {
      nativeBinding = require("./node-napi.darwin-universal.node");
    } catch {}
    if (!nativeBinding) {
      switch (arch) {
        case "x64":
          try {
            nativeBinding = require("./node-napi.darwin-x64.node");
          } catch (e) {
            loadError = e;
          }
          break;
        case "arm64":
          try {
            nativeBinding = require("./node-napi.darwin-arm64.node");
          } catch (e) {
            loadError = e;
          }
          break;
        default:
          throw new Error(`Unsupported architecture on macOS: ${arch}`);
      }
    }
    break;
  case "linux":
    switch (arch) {
      case "x64":
        if (isMusl()) {
          try {
            nativeBinding = require("./node-napi.linux-x64-musl.node");
          } catch (e) {
            loadError = e;
          }
        } else {
          try {
            nativeBinding = require("./node-napi.linux-x64-gnu.node");
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case "arm64":
        if (isMusl()) {
          try {
            nativeBinding = require("./node-napi.linux-arm64-musl.node");
          } catch (e) {
            loadError = e;
          }
        } else {
          try {
            nativeBinding = require("./node-napi.linux-arm64-gnu.node");
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case "arm":
        if (isMusl()) {
          try {
            nativeBinding = require("./node-napi.linux-arm-musleabihf.node");
          } catch (e) {
            loadError = e;
          }
        } else {
          try {
            nativeBinding = require("./node-napi.linux-arm-gnueabihf.node");
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case "riscv64":
        if (!isMusl()) {
          try {
            nativeBinding = require("./node-napi.linux-riscv64-gnu.node");
          } catch (e) {
            loadError = e;
          }
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Linux: ${arch}`);
    }
    break;
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`);
}

if (!nativeBinding) {
  if (loadError) {
    throw loadError;
  }
  throw new Error(`Failed to load native binding`);
}

const { Tokenizer } = nativeBinding;

module.exports.Tokenizer = Tokenizer;
